=begin pod

=head1 NAME

B<FontFactory> - Provides functions to ease using Unicode 
I<TrueType>, I<OpenType>, and I<Type 1> fonts with
I<PDF-generating> modules. 

=head1 SYNOPSIS

=begin code :lang<raku>
use FontFactory;
my $ff = FontFactory.new;
$ff.showfonts;
...show first few fonts
my $font1 = $ff.get-font: 2, 10.2; # font at index 2, set size at 10.2 points
say $font1.name;        # OUTPUT: 
say $font1.has-kerning; # OUTPUT: 
say $font1.FontBBox;    # OUTPUT: 
say $font1.path;        # OUTPUT: 
=end code

=head1 Installation

First, ensure your host has the C<fontconfig> and C<freetype> system libraries installed.
(They should be automatically installed by C<zef> as required modules C<Font::Freetype> and C<FontConfig>).
Then, before installing this module, you should add any additional desired fonts such those available
as packages for your system (for example, the Google Noto fonts are available in
Debian package C<fonts-noto>).

To get all the Google fonts, download them in a single, 1.1 Gb
file: C<wget https://github.com/google/fonts/archive/main.zip>. Then, as root, move
the file into the recommended directory and unpack it:

=begin code
# mv main.zip /usr/local/share/fonts
# cd /usr/local/share/fonts
# unzip main.zip
...
# rm main.zip
# find . -type f -exec chmod -R 644 {} \;
# fc-cache
=end code

To get a look at how your fonts appear when printed, install the program C<fntsample> (Debian
package name is the same) and use it with a desired font file name to get a detailed
sample on an output PDF file. See L<https://fntsample.sourceforge.net> for details.

When you are satisfied with your font collection, proceed with C<zef install FontFactory>.

=head2 Font licenses

Fonts installed on most systems are usually free for personal use, but may
have restrictions for other uses. Please ensure you adhere to those
requirements.

=head2 Font lists

=head3 System fonts

To use this module, you must first generate a list of all the TrueType, 
OpenType, and Type 1 fonts available on your system. The only 
directories searched are the following:

=item /usr/share/fonts
=item /usr/share/X11/fonts/Type1
=item /usr/share/X11/fonts/TTF
=item /usr/local/share/fonts

That search is automatically accomplished during the
installation by C<zef> in its build step. The list will be stored in your C<$HOME>
directory as C<$HOME/.fontfactory/system-fonts.list>.
That file looks something like this:

=begin code
# font-name location
Blarney.ttf /usr/src/fonts/
  #... more entries
Courier.otf /usr/local/fonts/
  #... more entries
=end code

Note that all instances of the same font will be listed and you can
edit the file to delete unwanted duplicates. That list is for your
reference and is not used by this module.

If for some reason (such as adding new fonts or deleting some) you want to
reinitialize the list, uninstall this module and reinstall it.

=head3 User fonts

For convenience you may want to create a another list to associate your oft-used fonts
with a short alias. That is done by creating a file named
C<$HOME/.fontfactory/my-fonts.list>.

The file should look something like this:

=begin code
# a valid data line contains three fields (words separated by one or more spaces):
#   1. alias 
#   2. font-name (with extension)
#   3. location (path)
# all data on a line after the third field are ignored
# blank or comment lines like this are ignored
  100   Blarney.ttf   ~/.fonts    my favorite serif font
  c     Courier.otf   /some/dir   my favorite monospaced font
  p     Pocus.ttf     /some/dir   my favorite sans serif font
  s     Scroll.otf    /some/dir   best for Jewish calendars
=end code

Note the fields B<alias>, B<font-name>, and B<location> (parent directory) are required. 
The B<alias> is some key you want to use to refer to that font. (This directory
will be searched before the system directories and its alias will override any
identical system font alias.)
The B<font-name> must include the suffix ('.otf', '.ttf', or '.t1').
The B<notes> field is optional. 

=head1 DESCRIPTION

B<FontFactory> is a Unicode font factory similar to C<FontFactory::Type1> but
using I<TrueType>, I<OpenType>, and I<Type 1> fonts.
It rovides functions to ease using Unicode fonts with
I<PDF-generating> modules.  It does that by defining a font
class that includes a specific font face and size along
with functions emulating those found in I<Font::AFM>.

=head1 See also

=item This author's Raku module C<FontFactory::Type1>.

=item David Warring's large collection of PDF Raku module at L<https://github.com/pdf-raku>.

=head1 AUTHOR

Tom Browder <tbrowder@acm.org>

=head1 COPYRIGHT AND LICENSE

Â© 2023 Tom Browder

This library is free software; you may redistribute it or modify it under the Artistic License 2.0.

=end pod
