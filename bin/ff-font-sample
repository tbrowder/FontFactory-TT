#!/bin/env raku
use PDF::Lite;
use FontFactory;

my $size = 12;
my $prog = $*PROGRAM.basename;

# prep text for a sample
my $text;
my $s1 = 'A'..'Z';
my $s2 = 'a'..'z';
my $s3 = 0..9;
my $s4 = <@#$&*()'"%-+=/;:,!?.>;
$text ~= $_ for $s1.eager;
$text ~= $_ for $s2.eager;
$text ~= $_ for $s3.eager;
$text ~= $_ for $s4.comb;

# Note this algorithm for specifying files is similar
# to that used in 'ff-find-font'.

if not @*ARGS {
    print qq:to/HERE/;
    Usage: $prog <search pattern> [size=M[.N]] [kern] [debug]
     
    Creates a PDF page with font samples with a line of text for each
    font found. Note there are three different ways of 
    indicating the fonts to be used:
     
        Name:   <search pattern>
        List:   212,234,506
        Range:  220-300
     
    The <search pattern> is a list of one or more strings, each of
    which is required to be found in a font name (not case sensitive).
     
    Entering 'kern' requires the fonts found to have kerning available.
     
    The default size is 12 points, but another size may be specified. 
     
    Examples:
     
        \${$prog} dejavu mono
        \${$prog} 214-216 size=10.9
     
    HERE 
    exit;
}

my $ff = FontFactory.new;
my %fonts = $ff.get-fonts;
my @fonts;
my $debug = 0;
my @pattern;
my $require-kern  = 0;
for @*ARGS {
    when /^ (<[\d,]>+) $/ {
         # list
         my $list = ~$0;
         @fonts = $list.split: /','/;
    }
    when /^ (\d+) '-' (\d+) $/ {
         # range
         my $start = +$0;
         my $end   = +$1;
         @fonts = ($start..$end).eager;
    }
    when /^ 'size=' (\d+ ['.' \d+? ]?) $/ {
         $size = +$0;
    }
    when /^:i debug $/ {
         ++$debug
    }
    when /^:i kern $/ {
         ++$require-kern
    }
    when /^ (\S+) $/ {
        my $term = ~$0;
        @pattern.push: $term;
    }
}

unless @pattern.elems or @fonts.elems {
    say "NOTE: No font pattern or indices entered...exiting.";
    exit;
}

if @pattern.elems {
    # search the names
    for %fonts.keys -> $alias {
        my $is-found = True;
        my $name = %fonts{$alias}<name>;
        for @pattern -> $pattern {
            unless $name ~~ /:i $pattern / {
                $is-found = False;
                last;
            }
        }
        @fonts.push(%fonts{$alias}) if $is-found;
    }
}

# check all found for any required kerning
if $require-kern {
    my @Fonts = @fonts;
    @fonts = [];
    =begin comment
    for @Fonts.sort({.Numeric}) -> $i {
        my $kern = %FontAliases{$i}<has-kerning>;
        if $require-kern {
            next if not $kern;
        }
        @fonts.push: $i;
    }
    =end comment
}

if not @fonts.elems {
    say "NOTE: No fonts found for your search criteria...exiting.";
    exit;
}

say "Found {@fonts.elems} fonts:";
for @fonts.keys.sort({.Str, .Numeric}) -> $alias {
    my $kern = %fonts{$alias}<has-kerning>;
    if $require-kern {
        next if not $kern;
    }
    my $font = %fonts{$alias}<font>;
    my $dir  = %fonts{$alias}<dir>;
    my ($name, $type) = $font.split: '.';

    my $path = "$dir/$font";
    say "  Alias: $alias";
    say "    Name:  $name";
    say "    Type:  $type";
    say "    Kern?  $kern";
    say "    Path:  $path";
}

say "Font samples will be set at $size points.";

